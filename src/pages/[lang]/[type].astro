---
import Layout from '../../layouts/Layout.astro';
import ComicCard from '../../components/ComicCard.astro';
import LoadingCard from '../../components/LoadingCard.astro';
import LanguageSelector from '../../components/LanguageSelector.astro';
import RSSLink from '../../components/RSSLink.astro';
import { fetchComics, isValidLanguage, isValidContentType, fetchGenres, getLanguageName } from '../../lib/api';
import type { Comic } from '../../lib/types';

export const prerender = false;

// Redirect old URLs to new structure
return Astro.redirect(`/${Astro.params.lang}/${Astro.params.type}/all`);

export async function getStaticPaths() {
  const languages = ['en', 'fr', 'es', 'it', 'pl', 'tr', 'ja', 'zh', 'sv'];
  const types = ['sfw', 'nsfw'];
  
  return languages.flatMap(lang => 
    types.map(type => ({
      params: { lang, type },
    }))
  );
}

const { lang, type } = Astro.params;

if (!isValidLanguage(lang!) || !isValidContentType(type!)) {
  return Astro.redirect('/en/sfw');
}

let comics: Comic[] = [];
let error: string | null = null;
const genres = await fetchGenres();

try {
  comics = await fetchComics(lang, type);
  console.log(`Fetched ${comics.length} comics`);
} catch (e) {
  console.error('Failed to fetch comics:', e);
  error = e instanceof Error ? e.message : 'Failed to fetch comics';
}

const title = `ComicK - ${getLanguageName(lang!)} ${type!.toUpperCase()}`;
const description = `Latest ${type!.toUpperCase()} comics in ${getLanguageName(lang!)}. Updated regularly with new chapters.`;
---

<Layout title={title} description={description}>
  <main class="mx-auto px-4 sm:px-6 lg:px-8 max-w-[1400px] text-primary">
    <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold text-center mb-8 sm:mb-12 bg-gradient-to-r from-accent via-accent-light to-white bg-clip-text text-transparent bg-[length:400%] bg-[0%]">
      ComicK-RSS
    </h1>

    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
      <div class="flex items-center gap-4">
        <LanguageSelector currentLang={lang!} currentType={type!} />
        <a 
          href="/custom" 
          class="inline-flex items-center gap-2 px-4 py-2 bg-accent text-secondary hover:bg-accent-light rounded-md transition-colors font-medium"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            class="w-5 h-5" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor" 
            stroke-width="2" 
            stroke-linecap="round" 
            stroke-linejoin="round"
          >
            <path d="M12 5v14M5 12h14"/>
          </svg>
          Custom Feed/Filter
        </a>
      </div>
      <RSSLink lang={lang!} type={type!} />
    </div>
    
    {error && (
      <div class="bg-red-500 text-white p-4 rounded-lg mb-8">
        <p>Error: {error}</p>
        <button 
          class="mt-2 px-4 py-2 bg-white text-red-500 rounded hover:bg-red-50 transition-colors"
          onclick="window.location.reload()"
        >
          Retry
        </button>
      </div>
    )}
    
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
      {comics.length > 0 ? (
        comics.map(comic => (
          <ComicCard comic={comic} genres={genres} />
        ))
      ) : !error ? (
        Array(10).fill(null).map(() => (
          <LoadingCard />
        ))
      ) : (
        <div class="col-span-full text-center bg-secondary p-6 rounded-lg">
          <p class="mb-4">No comics found. Please try a different language or content type.</p>
          <p class="text-sm opacity-70">Language: {getLanguageName(lang!)}, Type: {type!.toUpperCase()}</p>
        </div>
      )}
    </div>
  </main>
</Layout>